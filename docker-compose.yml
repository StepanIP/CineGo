version: '3'

services:
  prometheus:
    image: prom/prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - ./alert.rules.yml:/etc/prometheus/alert.rules.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--web.enable-lifecycle'

  alertmanager:
    image: prom/alertmanager
    ports:
      - "9093:9093"
    volumes:
      - ./alertmanager.yml:/etc/alertmanager/alertmanager.yml

  discord-relay:
    image: benjojo/alertmanager-discord
    ports:
      - "8086:8080"
    environment:
      - DISCORD_WEBHOOK=https://discord.com/api/webhooks/1381375617848840232/y9y_wij32fkA-SdryOu8DM7mYIxx-njuX3Y4gsYEVQ53FYd7TjDvdrW5bofwmBKDmG8C

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin

  elasticsearch:
    image: elasticsearch:8.17.1
    container_name: elasticsearch
    restart: always
    volumes:
      - elastic_data:/usr/share/elasticsearch/data/
    environment:
      - xpack.security.enabled=false  # Disable security for local development
      - ES_JAVA_OPTS=-Xmx256m -Xms256m
      - discovery.type=single-node
    ports:
      - '9200:9200'
    networks:
      - elk-network

  logstash:
    image: logstash:8.17.1
    container_name: logstash
    restart: always
    volumes:
      - ./logstash/:/logstash_dir
    command: logstash -f /logstash_dir/pipeline/logstash.conf
    depends_on:
      - elasticsearch
    ports:
      - '5044:5044'
    environment:
      - LS_JAVA_OPTS=-Xmx256m -Xms256m
    networks:
      - elk-network

  kibana:
    image: kibana:8.17.1
    container_name: kibana
    restart: always
    ports:
      - '5601:5601'
    environment:
      - ELASTICSEARCH_URL=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - elk-network

  zookeeper:
    container_name: zookeeper
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - kafka_network

  kafka:
    container_name: kafka
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_INTERNAL://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:9093
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - kafka_network
  akhq:
    user: root
    container_name: akhq
    image: tchiotludo/akhq
    ports:
      - "8080:8080"
    environment:
      AKHQ_CONFIGURATION: |
        akhq:
          connections:
            my-cluster:
              properties:
                bootstrap.servers: "kafka:9093"
    depends_on:
      - kafka
    volumes:
      - "./akhq-config.yml:/app/application.yml"
    networks:
      - kafka_network

  zipkin:
    container_name: zipkin
    image: openzipkin/zipkin
    ports:
      - "9411:9411"
    networks:
      - zipkin_network

  screeningDB:
    image: postgres
    container_name: screening
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: screenings
    ports:
      - "5100:5432"
    volumes:
      - screening-data:/var/lib/postgresql/data

  ticketsDB:
    image: postgres
    container_name: tickets
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: tickets
    ports:
      - "5555:5432"
    volumes:
      - tickets-data:/var/lib/postgresql/data

  paymentDB:
    image: postgres
    container_name: payments
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: payments
    ports:
      - "5454:5432"
    volumes:
      - payment-data:/var/lib/postgresql/data

  filmDB:
    image: postgres
    container_name: film
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: films
    ports:
      - "5001:5432"
    volumes:
      - films-data:/var/lib/postgresql/data

  userDB:
    image: postgres
    container_name: postgres-containerusers
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: users
    ports:
      - "5111:5432"
    volumes:
      - users-data:/var/lib/postgresql/data

  currenciesDB:
    image: postgres
    container_name: currencies
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: currencies
    ports:
      - "5050:5432"
    volumes:
      - currencies-data:/var/lib/postgresql/data

  # Microservices
  config-server:
    build: ./config-server
    container_name: config-server
    ports:
      - "8888:8888"
    networks:
      - zipkin_network
      - kafka_network

  discovery:
    build: ./discovery
    container_name: discovery
    ports:
      - "8761:8761"
    depends_on:
      - config-server
    networks:
      - zipkin_network
      - kafka_network

  gateway:
    build: ./gateway
    container_name: gateway
    ports:
      - "8080:8080"
    depends_on:
      - discovery
      - config-server
    networks:
      - zipkin_network
      - kafka_network

  user-service:
    build: ./user
    container_name: user-service
    depends_on:
      - discovery
      - config-server
      - userDB
      - kafka
    networks:
      - zipkin_network
      - kafka_network
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://userDB:5432/users
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=password

  film-service:
    build: ./film
    container_name: film-service
    depends_on:
      - discovery
      - config-server
      - filmDB
      - kafka
    networks:
      - zipkin_network
      - kafka_network
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://filmDB:5432/films
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=password

  ticket-service:
    build: ./ticket
    container_name: ticket-service
    depends_on:
      - discovery
      - config-server
      - ticketsDB
      - kafka
    networks:
      - zipkin_network
      - kafka_network
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://ticketsDB:5432/tickets
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=password

  screening-service:
    build: ./screening
    container_name: screening-service
    depends_on:
      - discovery
      - config-server
      - screeningDB
      - kafka
    networks:
      - zipkin_network
      - kafka_network
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://screeningDB:5432/screenings
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=password

  payment-service:
    build: ./payment
    container_name: payment-service
    depends_on:
      - discovery
      - config-server
      - paymentDB
      - kafka
    networks:
      - zipkin_network
      - kafka_network
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://paymentDB:5432/payments
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=password

  currencies-service:
    build: ./currencies
    container_name: currencies-service
    depends_on:
      - discovery
      - config-server
      - currenciesDB
      - kafka
    networks:
      - zipkin_network
      - kafka_network
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://currenciesDB:5432/currencies
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=password

  emailsender-service:
    build: ./emailsender
    container_name: emailsender-service
    depends_on:
      - discovery
      - config-server
      - kafka
    networks:
      - zipkin_network
      - kafka_network

networks:
  zipkin_network:
    driver: bridge
  kafka_network:
    driver: bridge
  elk-network:
    driver: bridge

volumes:
  postgres:
  pgadmin:
  postgres-data:
  tickets-data:
  films-data:
  screening-data:
  users-data:
  currencies-data:
  payment-data:
  elastic_data:

